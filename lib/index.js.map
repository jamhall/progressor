{"version":3,"sources":["../src/index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Helpers from './helpers'\nimport pad from 'pad';\nimport {\n    sprintf\n}\nfrom 'sprintf';\nimport _ from 'lodash';\nclass Progressor {\n\n    constructor(options, max) {\n        this._ = require('lodash');\n\n        this.options = {\n            barWidth: 28,\n            emptyBarChar: '-',\n            progressChar: '>',\n            redrawFreq: 1,\n            barChar: null,\n            format: 'normal'\n        }\n\n        this.step = 0;\n        this.stepWidth;\n        this.max;\n        this.startTime;\n        this.percent = 0.0;\n        this.lastMessagesLength = 0;\n        this.messages = {};\n        this.overwrite = true;\n        this.output = process.stdout;\n        this.formatters = null;\n        this.max = this._setMaxSteps(max);\n        this.options = this._.merge(this.options, options);\n        this.format = Progressor._formats[this.options.format];\n        this.formatLineCount = this.format.split(\"\\n\").length;\n    }\n\n    getFormats() {\n        return Progressor._formats;\n    }\n\n    start(max = null) {\n        this.startTime = Date.now();\n        this.step = 0;\n        this.percent = 0.0;\n        if (null !== max) {\n            this._setMaxSteps(max);\n        }\n        this.display();\n    }\n\n    _setMaxSteps(max) {\n        let _max = Math.max(0, max);\n        this.stepWidth = _max ? _max.toString()\n            .length : 4;\n        return _max;\n    }\n\n    /**\n     * Outputs the current progress string.\n     */\n    display() {\n        let text;\n        this.update(this.format.replace(/%([a-z\\-_]+)(?:\\:([^%]+))?%/g, (matches, part1, part2) => {\n            var formatter = this.getPlaceholderFormatterDefinition(part1);\n            if (formatter) {\n                text = formatter(this);\n            } else if (this.messages.hasOwnProperty(part1)) {\n                text = this.messages[part1];\n            } else {\n                return matches;\n            }\n\n            if (part2) {\n                text = sprintf('%' + part2, text);\n            }\n            return text;\n        }));\n    }\n\n    clearLine() {\n            this.output.clearLine();\n        }\n        /**\n         * Removes the progress bar from the current line.\n         *\n         * This is useful if you wish to write some output\n         * while a progress bar is running.\n         * Call display() to show the progress bar again.\n         */\n    clear() {\n        \"\\n\".repeat(4);\n    }\n\n    /**\n     * Advances the progress output X steps\n     */\n    advance(step = 1) {\n        this.setProgress(this.step + step);\n    }\n\n    /**\n     * Sets the current progress\n     */\n    setProgress(step) {\n            step = parseInt(step);\n            if (step < this.step) {\n                throw new Exception('You can\\'t regress the progress bar.');\n            }\n            if (this.max && step > this.max) {\n                this.max = step;\n            }\n            let previousPeriod = parseInt(this.step / this.options.redrawFreq);\n            let currentPeriod = parseInt(step / this.options.redrawFreq);\n            this.step = step;\n            this.percent = this.max ? parseFloat(this.step / this.max) : 0;\n            if (previousPeriod !== currentPeriod || this.max == step) {\n                this.display();\n            }\n        }\n        /**\n         * Updates the display\n         */\n    update(message) {\n        let lines = message.split(\"\\n\");\n        if (null !== this.lastMessagesLength) {\n          for (let index in lines) {\n            let line = lines[index];\n            if (this.lastMessagesLength > Helpers.strlenWithoutDecoration(line)) {\n                lines[index] = pad(line, this.lastMessagesLength, \"\\x20\");\n            }\n          }\n        }\n\n        if (this.overwrite) {\n          // move back to the beginning of the progress bar before redrawing it\n          this.output.write(\"\\x0D\");\n        } else if(this.step > 0) {\n          this.output.write(\"\\n\");\n        }\n\n        if (this.formatLineCount) {\n          this.output.write(sprintf(\"\\033[%dA\", this.formatLineCount));\n        }\n\n        this.output.write(lines.join(\"\\n\"));\n        this.lastMessagesLength = 0;\n\n        for (let index in lines) {\n          let line = lines[index];\n          let len = Helpers.strlenWithoutDecoration(line);\n\n          if (len > this.lastMessagesLength) {\n              this.lastMessagesLength = len;\n          }\n        }\n    }\n\n    getBarCharacter() {\n        if (null === this.options.barChar) {\n            return this.max ? '=' : this.options.emptyBarChar;\n        }\n        return this.options.barChar;\n    }\n\n    initPlaceholders() {\n        let placeholders =  {\n            'bar': (bar) => {\n                let completeBars = Math.floor(bar.max > 0 ? bar.percent * bar.options.barWidth : bar.step % bar.options.barWidth);\n                let display = bar.getBarCharacter()\n                    .repeat(completeBars);\n                if (completeBars < bar.options.barWidth) {\n                    let emptyBars = bar.options.barWidth - completeBars - Helpers.strlenWithoutDecoration(bar.options.progressChar);\n                    display = display + bar.options.progressChar + bar.options.emptyBarChar.repeat(emptyBars);\n                }\n                return display;\n            },\n            'elapsed': (bar) => {\n                let seconds = (Date.now() - bar.startTime) / 1000;\n                return Helpers.formatTime(seconds);\n            },\n            'max': (bar) => {\n                return bar.max;\n            },\n            'percent': (bar) => {\n                return Math.floor(bar.percent * 100);\n            },\n            'estimated': (bar) => {\n                let estimated;\n                if (!bar.max) {\n                    throw new Error('Unable to display the estimated time if the maximum number of steps is not set.');\n                }\n                if (!bar.step) {\n                    estimated = 0;\n                } else {\n                    estimated = Math.round(((Date.now() - bar.startTime) / 1000) / bar.step * bar.max);\n                }\n                return Helpers.formatTime(estimated);\n            },\n            'current': (bar) => {\n                return pad(bar.step.toString(), bar.options.stepWidth, ' ');\n            },\n            'memory': (bar) => {\n                let memoryUsage = process.memoryUsage();\n                return Helpers.formatMemory(memoryUsage.rss);\n            },\n            'remaining': (bar) => {\n                let remaining;\n                if (!bar.max) {\n                    throw new Error('Unable to display the remaining time if the maximum number of steps is not set.');\n                }\n                if (!bar.step) {\n                    remaining = 0;\n                } else {\n                    remaining = Math.round(((Date.now() - bar.startTime) / 1000) / bar.step * (bar.max - bar.step));\n                }\n                return Helpers.formatTime(remaining);\n            }\n        }\n        return _.merge(placeholders, Progressor._customPlaceholders);\n    }\n    getPlaceholderFormatterDefinition(formatter) {\n        if (!this.formatters) {\n            this.formatters = this.initPlaceholders();\n        }\n        return this.formatters.hasOwnProperty(formatter) ? this.formatters[formatter] : null;\n    }\n\n    setMessage(message, name = 'message') {\n        this.messages[name] = message;\n    }\n    /**\n     * Finishes the progress output.\n     */\n    finish() {\n        if (!this.max) {\n            this.max = this.step;\n        }\n        if (this.step === this.max && !this.overwrite) {\n            return;\n        }\n        this.setProgress(this.max);\n    }\n    static addFormat(name, definition) {\n        this._formats[name] = definition;\n    }\n    static setPlaceholderFormatDefinition(name, definition) {\n      this._customPlaceholders[name] = definition;\n    }\n};\n\nProgressor._customPlaceholders = {};\n\nProgressor._formats = {\n    'normal': ' %current%/%max% [%bar%] %percent:3s%%',\n    'normal_nomax': ' %current% [%bar%]',\n    'verbose': ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%',\n    'verbose_nomax': ' %current% [%bar%] %elapsed:6s%',\n    'very_verbose': ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s%',\n    'very_verbose_nomax': ' %current% [%bar%] %elapsed:6s%',\n    'debug': ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%',\n    'debug_nomax': ' %current% [%bar%] %elapsed:6s% %memory:6s%'\n}\nexport default Progressor;\n"]}