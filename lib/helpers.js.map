{"version":3,"sources":["../src/helpers.es6"],"names":[],"mappings":"AAAA,MAAM,OAAO,CAAC;AACZ,SAAO,UAAU,CAAC,OAAO,EAAE;AACzB,QAAI,WAAW,GAAG,CAAE,CAAC,CAAC,EAAE,SAAS,CAAC,EACtB,CAAC,CAAC,EAAE,OAAO,CAAC,EACZ,CAAC,EAAE,EAAG,MAAM,EAAE,CAAC,CAAC,EACjB,CAAC,EAAE,EAAG,OAAO,CAAC,EACd,CAAC,IAAI,EAAG,MAAM,EAAE,EAAE,CAAC,EACnB,CAAC,IAAI,EAAE,MAAM,CAAC,EACd,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EACpB,CAAC,MAAM,EAAE,OAAO,CAAC,EACjB,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAC1B,CAAA;AACD,SAAI,IAAI,MAAM,IAAI,WAAW,EAAE;AAC7B,UAAG,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;AACvB,iBAAS;OACV;AACD,UAAG,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE;AACrB,eAAO,MAAM,CAAC,CAAC,CAAC,CAAC;OAClB;AACD,aAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;KAC3D;GACP;AACD,SAAO,YAAY,CAAC,MAAM,EAAE;AAC1B,QAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;AACzC,QAAI,MAAM,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE;AAC9B,aAAO,OAAO,CAAC,UAAU,EAAE,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;KAC3D;AACD,QAAI,MAAM,IAAI,IAAI,GAAG,IAAI,EAAE;AACvB,aAAO,OAAO,CAAC,UAAU,EAAE,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;KACpD;AACD,QAAI,MAAM,IAAI,IAAI,EAAE;AAChB,aAAO,OAAO,CAAC,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC;KAC3C;AACD,WAAO,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;GAChC;AACD,SAAO,uBAAuB,CAAC,MAAM,EAAE;AACrC,QAAI,OAAO,GAAG,eAAe,CAAC;AAC9B,WAAO,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC;GAC7C;;CAEF;;AAED,eAAe,OAAO,CAAC","file":"helpers.js","sourcesContent":["class Helpers {\n  static formatTime(seconds) {\n    let timeFormats = [ [0, '< 1 sec'],\n                [2, '1 sec'],\n                [59 , 'secs', 1],\n               [60 , '1 min'],\n               [3600,  'mins', 60],\n               [5400, '1 hr'],\n               [86400, 'hrs', 3600],\n               [129600, '1 day'],\n               [604800, 'days', 86400]\n           ]\n           for(let format of timeFormats) {\n             if(seconds >= format[0]) {\n               continue;\n             }\n             if(2 == format.length) {\n               return format[1];\n             }\n             return Math.ceil(seconds / format[2]) + ' ' + format[1];\n         }\n  }\n  static formatMemory(memory) {\n    let sprintf = require('sprintf').sprintf;\n    if (memory >= 1024 * 1024 * 1024) {\n        return sprintf('%.1f GiB', memory / 1024 / 1024 / 1024);\n    }\n    if (memory >= 1024 * 1024) {\n        return sprintf('%.1f MiB', memory / 1024 / 1024);\n    }\n    if (memory >= 1024) {\n        return sprintf('%d KiB', memory / 1024);\n    }\n    return sprintf('%d B', memory);\n  }\n  static strlenWithoutDecoration(string) {\n    var pattern = /\\033\\[[^m]*m/g;\n    return string.replace(pattern, \"\\n\").length;\n  }\n\n}\n\nexport default Helpers;\n"]}